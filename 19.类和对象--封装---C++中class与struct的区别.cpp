//在C++中struct 和class唯一的区别在于  默认的访问权限不同
//  struct  默认权限为公共
//  class   默认权限为私有
/*
在C++中，`struct`和`class`是两种用于定义用户自定义数据类型（类）的关键字。它们在语法上很相似，但在默认访问权限、成员函数、继承等方面存在一些区别。

以下是`struct`和`class`之间的主要区别：

1. 默认访问权限：
   - 在`struct`中，成员默认的访问权限是`public`，这意味着在外部可以直接访问`struct`的成员。
   - 在`class`中，成员默认的访问权限是`private`，这意味着在外部不能直接访问`class`的私有成员。

2. 成员函数：
   - 在`struct`和`class`中都可以定义成员函数，但是在`class`中可以更方便地实现封装，因为默认情况下成员是私有的，需要使用公有成员函数来访问私有成员。

3. 继承：
   - 在`struct`和`class`中都可以用来实现继承，但在使用默认继承权限时有些差异：
     - 在`struct`中，默认继承权限是`public`，派生类的公有成员在派生类外部仍然可以访问。
     - 在`class`中，默认继承权限是`private`，派生类的公有成员在派生类外部是不可访问的。

4. 类型别名：
   - 在`struct`和`class`中都可以用于定义类型别名（typedef），并且没有区别。

总之，`struct`和`class`之间的区别在于默认的访问权限和继承权限。
在实际使用中，它们的主要区别在于代码的组织和封装程度。通常情况下，如果你希望实现更严格的封装，可以使用`class`，
而如果你希望更轻松地共享数据，可以使用`struct`。但是，这些区别不是绝对的，可以根据需要进行调整。
*/
#include<iostream>
using namespace std;

class C1
{
    int m_A;
};
struct C2
{
    int m_A;
};

int main19()
{
    C1 c1;
    //c1.m_A = 100;    私有，不可以访问

    C2 c2;
    c2.m_A = 100;

    system("pause");
    return 0;
}