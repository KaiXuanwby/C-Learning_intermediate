//对象的初始化和清理
//生活中我们买的电子产品基本都会有出场设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
//C++中的面向对象来源于生活，每个对象也都会有初始设置以及对象销毁前的清理数据的设置

//构造函数和析构函数
// todo 对象的初始化和清理也是两个非常重要的安全问题
//一个对象或者变量没有初始状态，对其使用后果未知
//同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题
//todo C++使用构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象的初始化和清理工作
//对象的初始化和清理工作是编译器强制让我们做的事情，因此
//todo 如果我们不提供构造函数和析构函数，编译器会提供编译器提供的构造函数和析构函数是空实现（什么都没有，空）
//todo构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用
//todo析构函数：主要作用在于对象  销毁前  系统自动调用，执行一些清理工作

/*
构造函数语法：类名(  )  {  }
构造函数没有返回值，也不写void
函数名称与类名相同
构造函数可以有参数，因此可以发生重载
程序在调用对象的时候会自动调用构造，无需手动调用，而且只会调用一次
*/
/*
析构函数语法：  ~类名 （ ）{   }
析构函数没有返回值，也不写void
函数名称与类名相同，在名称前加上~
析构函数不可以有参数，因此不可以发生重载
程序在调用对象的时候会自动调用析构，无需手动调用，而且只会调用一次
*/
#include<iostream>
using namespace std;

//对象的初始化和清理
 
class Person23
{
public:
	//构造函数
	Person23()
	{
		cout << "Person构造函数的调用" << endl;
	}


	//析构函数
	~Person23()
	{
		cout << "Person析构函数的调用" << endl;
	}
};

void test2301()
{
	Person23 p;  //在栈区创建的数据，test01执行完毕之后，释放这个对象
}
int main23()
{
	Person23 p; //什么时候  释放/销毁  变量，什么时候执行析构
	//test2301();
	system("pause");
	return 0;
}